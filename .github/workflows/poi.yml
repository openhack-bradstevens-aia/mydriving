name: poi

env:
  ACR: openhackqj13fpm0acr.azurecr.io
  STAGING_URL: https://openhackqj13fpm0poi-staging.azurewebsites.net
  PROD_URL: https://openhackqj13fpm0poi.azurewebsites.net
  HEALTH_CHECK: api/healthcheck/poi
  RG: openhackqj13fpm0rg
  WEBAPP_NAME: openhackqj13fpm0poi

on:
  push:
    branches:
      - '*'
    paths:
      - apis/poi/**
      - .github/workflows/poi.yml
  # pull_request:
  #   branches: [ main ]
  #   paths:
  #     - apis/poi/**

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Setup .NET
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: '3.1.202'
    - name: Add Code Coverage Tools
      working-directory: apis/poi/tests/UnitTests
      
      run: dotnet add package coverlet.msbuild
    - name: Install dependencies
      run: dotnet restore apis/poi/web/*.csproj

    - name: .NET Build Web
      run: dotnet build --configuration Release --no-restore apis/poi/web/*.csproj

    - name: .NET Build Unit Tests
      run: dotnet build --configuration Release apis/poi/tests/UnitTests/UnitTests.csproj

    - name: Create Issue on Failed Workflow Unit Test
      if: failure()
      uses: dacbd/create-issue-action@main
      with:
        token: ${{ github.token }}
        title: Action workflow Unit Test failed.
        body: |
          ### Context
          [Failed Run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_number }})
          [Codebase](https://github.com/${{ github.repository }}/tree/${{ github.sha }})
          Workflow name - `${{ github.workflow }}`
          Job -           `${{ github.job }}`
          status -        `${{ job.status }}`

    - name: Docker Login
      run: docker login openhackqj13fpm0acr.azurecr.io --username=${{SECRETS.CONTAINER_USER}} --password=${{SECRETS.CONTAINER_SECRET}}
    
    - name: Docker build
      working-directory: apis/poi/web
      run: docker build -t openhackqj13fpm0acr.azurecr.io/mydriveway/api-poi:${{github.run_number}} .
      
    - name: Docker push
      run: docker push openhackqj13fpm0acr.azurecr.io/mydriveway/api-poi:${{github.run_number}}

    - name: .NET Test
      run: dotnet test --no-restore --verbosity normal apis/poi/tests/UnitTests  /p:CollectCoverage=true /p:CoverletOutput=lcov/ /p:CoverletOutputFormat=lcov

    - name: Coveralls
      uses: coverallsapp/github-action@master
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        path-to-lcov: apis/poi/tests/UnitTests/lcov/coverage.info
        base-path: apis/poi
        flag-name: Unit

    - name: Login to Azure CLI
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
      
    - name : Deploy App Service 
      uses: azure/webapps-deploy@v2
      with:
        app-name: ${{ env.WEBAPP_NAME }}
        images: "${{ env.ACR }}/mydriveway/api-poi:${{ github.run_number }}"
        slot-name: staging

    - name: Validate Staging
      uses: jtalk/url-health-check-action@v2
      with:
        # Check the following URLs one by one sequentially
        url: ${{ env.STAGING_URL }}/${{ env.HEALTH_CHECK }}
        # Follow redirects, or just report success on 3xx status codes
        follow-redirect: false # Optional, defaults to "false"
        # Fail this action after this many failed attempts
        max-attempts: 3 # Optional, defaults to 1
        # Delay between retries
        retry-delay: 5s # Optional, only applicable to max-attempts > 1
        # Retry all errors, including 404. This option might trigger curl upgrade.
        retry-all: false # Optional, defaults to "false"
    
    - name: Swap staging to production
      run: |
        az webapp deployment slot swap --name ${{ env.WEBAPP_NAME }} --resource-group ${{ env.RG }} --slot staging --target-slot production
    - uses: dacbd/create-issue-action@main
      if: failure()
      with:
        token: ${{ github.token }}
        title: Swapping ${{ env.WEBAPP_NAME }} staging to productoin failed.
        body: |
          ### Context
          [Failed Run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_number }})
          [Codebase](https://github.com/${{ github.repository }}/tree/${{ github.sha }})
          Workflow name - `${{ github.workflow }}`
          Job -           `${{ github.job }}`
          status -        `${{ job.status }}`

    - name: Validate_Production
      uses: jtalk/url-health-check-action@v2
      with:
        # Check the following URLs one by one sequentially
        url: ${{ env.PROD_URL }}/${{ env.HEALTH_CHECK }}
        # Follow redirects, or just report success on 3xx status codes
        follow-redirect: false # Optional, defaults to "false"
        # Fail this action after this many failed attempts
        max-attempts: 3 # Optional, defaults to 1
        # Delay between retries
        retry-delay: 5s # Optional, only applicable to max-attempts > 1
        # Retry all errors, including 404. This option might trigger curl upgrade.
        retry-all: false # Optional, defaults to "false"
   
    - name: Rollback
      if: failure()
      run: |
        az webapp deployment slot swap --name ${{ env.WEBAPP_NAME }} --resource-group ${{ env.RG }} --slot staging --target-slot production
    
    - name: Create issue
      uses: dacbd/create-issue-action@main
      if: failure()
      with:
        token: ${{ github.token }}
        title: Action workflow failed.
        body: |
          ### Context
          [Rollback Failure](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_number }})
          [Codebase](https://github.com/${{ github.repository }}/tree/${{ github.sha }})
          Workflow name - `${{ github.workflow }}`
          Job -           `${{ github.job }}`
          status -        `${{ job.status }}`

    - name: Rollback
      if: failure()
      # needs: Validate_Production
      # steps:
        - name: Swap Production with Staging
          run: |
            az webapp deployment slot swap --name ${{ env.WEBAPP_NAME }} --resource-group ${{ env.RG }} --slot production --target-slot staging
        - uses: dacbd/create-issue-action@main
          if: failure()
          with:
            token: ${{ github.token }}
            title: Action workflow failed.
            body: |
              ### Context
              [Rollback Failure](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_number }})
              [Codebase](https://github.com/${{ github.repository }}/tree/${{ github.sha }})
              Workflow name - `${{ github.workflow }}`
              Job -           `${{ github.job }}`
              status -        `${{ job.status }}`